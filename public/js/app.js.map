{"version":3,"sources":["js/app.js","js/controllers/auth.js","directives/googleMap.js","js/controllers/main.js","js/models/route.js","js/router.js","js/controllers/routes.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","restrict","replace","template","scope","center","zoom","waypoints","hasInfoWindows","link","$scope","element","clearMarkers","markers","forEach","marker","routePath","setMap","map","google","maps","Map","mapTypeId","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","$watch","waypoint","Marker","position","lat","lng","animation","Animation","DROP","addListener","infoWindow","open","push","close","console","log","route","id","window","location","href","contentString","title","route_description","InfoWindow","content","MainController","$rootScope","logout","secureState","e","toState","toParams","isAuthenticated","protectedStates","includes","name","parseFloat","getPayload","preventDefault","main","isLoggedIn","$on","Route","$resource","update","method","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","RoutesIndexController","routesIndex","query","routes","all","RoutesShowController","deleteRoute","routesShow","$remove","get","params","delete","RoutesEditController","routesEdit","$update","UsersIndexController","User","usersIndex","UsersShowController","allowUserToEdit","usersShow","currentUserId","editable","deleteUser","$promise","data","UsersEditController","usersEdit","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        // how to store current user?\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window', '$state'];\n\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '=',\n      zoom: '=',\n      waypoints: '=',\n      hasInfoWindows: '='\n    },\n    link: function ($scope, element) {\n      const map = new $window.google.maps.Map(element[0] , {\n        center: $scope.center,\n        zoom: $scope.zoom,\n        mapTypeId: 'terrain'\n      });\n\n      const routePath = new $window.google.maps.Polyline({\n        path: markers,\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      });\n\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          routePath.setMap(map);\n          marker.setMap(null);\n        });\n        markers =[];\n      }\n\n//ROUTES INDEX\n      $scope.$watch('waypoints', ($state) => {\n        clearMarkers();\n        if($scope.waypoints) {\n          $scope.waypoints.forEach((waypoint) => {\n            const marker = new $window.google.maps.Marker({\n              position: { lat: waypoint.lat, lng: waypoint.lng },\n              map: map,\n              animation: $window.google.maps.Animation.DROP\n            });\n\n            if($scope.hasInfoWindows) {\n              marker.addListener('mouseover', () => {\n                infoWindow.open(map, marker);\n                markers.push(marker);\n              });\n              marker.addListener('mouseout', () => {\n                infoWindow.close();\n              });\n              marker.addListener('click', () => {\n                console.log(`/routes/${waypoint.route.id}`);\n                // $state.go(`routes/${waypoint.route.id}`);\n                window.location.href = `http://localhost:8000/#/routes/${waypoint.route.id}`;\n              });\n\n              const contentString = '<h1>' + waypoint.route.title +'</h1>' + '<p>' + waypoint.route.route_description + '</p>';\n              const infoWindow = new $window.google.maps.InfoWindow({\n                content: contentString\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n}\n","\nangular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Route', Route);\n\nRoute.$inject = ['$resource', 'API_URL'];\nfunction Route($resource, API_URL) {\n  return new $resource(`${API_URL}/routes/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('routesIndex', {\n      url: '/routes',\n      templateUrl: '/templates/routesIndex.html',\n      controller: 'RoutesIndexController as routesIndex'\n    })\n    .state('routesShow', {\n      url: '/routes/:id',\n      templateUrl: '/templates/routesShow.html',\n      controller: 'RoutesShowController as routesShow'\n    })\n    .state('routesNew', {\n      url: '/routesNew',\n      templateUrl: '/templates.routesNew.html',\n      controller: 'RoutesNewController as routesNew'\n    })\n    .state('routesEdit', {\n      url: '/routes/:id/edit',\n      templateUrl: '/templates.routesEdit.html',\n      controller: 'RoutesEditController as routesEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/routes');\n}\n","angular.module('finalProject')\n  .controller('RoutesIndexController', RoutesIndexController)\n  .controller('RoutesShowController', RoutesShowController)\n  .controller('RoutesEditController', RoutesEditController);\n\n\nRoutesIndexController.$inject = ['Route'];\nfunction RoutesIndexController(Route) {\n  const routesIndex = this;\n  Route.query((routes) => {\n    routesIndex.all = routes;\n\n    routesIndex.waypoints = routes.map((route) => {\n      return route.waypoints[0];\n    });\n  });\n}\n\nRoutesShowController.$inject = ['Route', '$state'];\nfunction RoutesShowController(Route, $state) {\n  const routesShow = this;\n\n  routesShow.center = null;\n  Route.get($state.params, (route) => {\n    routesShow.route = route;\n    routesShow.center = { lat: routesShow.route.waypoints[0].lat, lng: routesShow.route.waypoints[0].lng };\n  });\n\n  function deleteRoute() {\n    routesShow.route.$remove(() => {\n      $state.go('RoutesIndex');\n    });\n  }\n  routesShow.delete = deleteRoute;\n}\n\nRoutesEditController.$inject = ['Route', '$state'];\nfunction RoutesEditController(Route, $state) {\n  const routesEdit = this;\n\n  routesEdit.route = Route.get($state.params);\n\n  function update() {\n    routesEdit.route.$update(() => {\n      $state.go('routesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  const currentUserId = $auth.getPayload().id;\n  usersShow.editable = false;\n\n// wait until data has been returned from db to run function allowUserToEdit.\n  User.get($state.params).$promise.then((data) => {\n    usersShow.user = data;\n    allowUserToEdit();\n  });\n\n//prevent logged in user editing other users\n  function allowUserToEdit() {\n    // console.log('user to edit:', usersShow.user.id);\n    // console.log('currentUser:', currentUserId);\n    if (usersShow.user.id === currentUserId) {\n      usersShow.editable = true;\n    }\n  }\n\n  usersShow.allowUserToEdit = allowUserToEdit;\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}