{"version":3,"sources":["js/app.js","js/controllers/auth.js","directives/googleMap.js","js/controllers/main.js","js/models/route.js","js/router.js","js/controllers/routes.js","js/controllers/users.js","js/models/users.js","js/models/waypoint.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","Waypoint","restrict","replace","template","scope","center","zoom","waypoints","hasInfoWindows","isEditable","isTraceable","routeId","link","$scope","element","addWaypoint","event","console","log","waypoint","lat","latLng","lng","params","id","route_id","position","length","createdWaypoints","push","save","createMarker","drawPolyLines","markerRoutePathWaypoints","waypointsToPlot","forEach","routePath","setPath","clearMarkers","markers","marker","setMap","handleEvent","update","google","maps","Marker","map","animation","Animation","DROP","draggable","addListener","infoWindow","open","close","window","location","href","route","contentString","title","route_description","InfoWindow","content","Map","mapTypeId","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","$watch","MainController","$rootScope","logout","secureState","e","toState","toParams","isAuthenticated","protectedStates","includes","name","parseFloat","getPayload","preventDefault","getLocation","navigator","geolocation","getCurrentPosition","main","myLat","coords","latitude","toFixed","myLng","longitude","$","append","bind","isLoggedIn","currentUser","$on","Route","$resource","method","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","RoutesIndexController","routesIndex","query","routes","all","RoutesNewController","create","routesNew","showmap","createRoute","RoutesShowController","deleteRoute","routesShow","$remove","switchEditState","get","currentUserId","isCurrentUser","delete","RoutesEditController","routesEdit","$update","reload","UsersIndexController","User","usersIndex","UsersShowController","allowUserToEdit","usersShow","editable","deleteUser","$promise","data","UsersEditController","usersEdit","angular","module","constant","hostname","config","$inject","directive","factory"],"mappings":"YAKA,SAASA,MAAKC,EAAeC,GAC3BD,EAAcE,SAAcD,EAA5B,SACAD,EAAcG,UAAeF,EAA7B,YAEAD,EAAcI,YAAc,GCJ9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WAEJL,EAAOM,GAAG,iBARhB,GAAMG,GAAQF,IAEdE,GAAMC,eAUND,EAAMR,OAASA,EC7BjB,QAASU,WAAUC,EAASZ,EAAQa,GAClC,OACEC,SAAU,IACVC,SAAS,EACTC,SAAU,iCACVC,OACEC,OAAQ,IACRC,KAAM,IACNC,UAAW,IACXC,eAAgB,IAChBC,WAAY,IACZC,YAAa,IACbC,QAAS,KAEXC,KAAM,SAAUC,EAAQC,GAiBtB,QAASC,GAAYC,GACnBC,QAAQC,IAAI,UACZ,IAAMC,KACNA,GAASC,IAAMJ,EAAMK,OAAOD,MAC5BD,EAASG,IAAMN,EAAMK,OAAOC,MAEzBnC,EAAOoC,OAAOC,IACfL,EAASM,SAAWtC,EAAOoC,OAAOC,GAClCL,EAASO,SAAWb,EAAON,UAAUoB,OAAS,IAG9CR,EAASM,SAAWZ,EAAOF,QAC3BiB,EAAiBC,KAAKV,GACtBA,EAASO,SAAWE,EAAiBD,QAEvC3B,EAAS8B,KAAKX,EAAU,SAACA,GACpBhC,EAAOoC,OAAOC,IACfX,EAAON,UAAUsB,KAAKV,GAExBY,EAAaZ,GACba,MAkBJ,QAASA,KACP,GAAGnB,EAAOH,YAAa,CACrBuB,IACA,IAAMC,GAAkBrB,EAAON,UAAYM,EAAON,UAAYqB,CAC9DM,GAAgBC,QAAQ,SAAChB,GACvBc,EAAyBJ,MAAOT,IAAKD,EAASC,IAAKE,IAAKH,EAASG,QAEnEc,EAAUC,QAAQJ,IAOtB,QAASK,KACPC,EAAQJ,QAAQ,SAACK,GACfA,EAAOC,OAAO,QAEhBF,KAIF,QAASG,GAAY1B,GACnBtB,KAAKyB,SAASC,IAAMJ,EAAMK,OAAOD,MACjC1B,KAAKyB,SAASG,IAAMN,EAAMK,OAAOC,MACjCtB,EAAS2C,OAAOjD,KAAKyB,SAAU,WAE7Ba,MAIJ,QAASD,GAAaZ,GACpB,GAAMqB,GAAS,GAAIzC,GAAQ6C,OAAOC,KAAKC,QACrCpB,UAAYN,IAAKD,EAASC,IAAKE,IAAKH,EAASG,KAC7CyB,IAAKA,EACLC,UAAWjD,EAAQ6C,OAAOC,KAAKI,UAAUC,KACzCC,UAAWtC,EAAOJ,WAClBU,SAAUA,GAKZqB,GAAOY,YAAY,UAAWV,GAG3B7B,EAAOL,iBAAgB,WACxBgC,EAAOY,YAAY,YAAa,WAC9BC,EAAWC,KAAKP,EAAKP,GACrBD,EAAQV,KAAKW,KAEfA,EAAOY,YAAY,WAAY,WAC7BC,EAAWE,UAEbf,EAAOY,YAAY,QAAS,WAC1BI,OAAOC,SAASC,KAAhB,kCAAyDvC,EAASwC,MAAMnC,IAI1E,IAAMoC,GAAgB,OAASzC,EAASwC,MAAME,MAAO,WAAkB1C,EAASwC,MAAMG,kBAAoB,8NACpGT,EAAa,GAAItD,GAAQ6C,OAAOC,KAAKkB,YACzCC,QAASJ,OAIbrB,EAAQV,KAAKW,GAtHfvB,QAAQC,IAAIL,EACZ,IAAMkC,GAAM,GAAIhD,GAAQ6C,OAAOC,KAAKoB,IAAInD,EAAQ,IAC9CT,OAAQQ,EAAOR,OACfC,KAAMO,EAAOP,KACb4D,UAAW,YAWPtC,IA0BNmB,GAAIK,YAAY,WAAYrC,EAE5B,IAAIkB,MACEG,EAAY,GAAIrC,GAAQ6C,OAAOC,KAAKsB,UACxCC,UAAU,EACVC,YAAa,UACbC,cAAe,EACfC,aAAc,EACdxB,IAAKA,GAgBPf,IAEA,IAAIO,KAuDJ1B,GAAO2D,OAAO,YAAa,WACzBlC,IACGzB,EAAON,WACRM,EAAON,UAAU4B,QAAQJ,OC5InC,QAAS0C,gBAAevF,EAAOC,EAAQuF,GAMrC,QAASC,KACPzF,EAAMyF,SACLnF,KAAK,WACJL,EAAOM,GAAG,WAMd,QAASmF,GAAYC,EAAGC,EAASC,KAE1B7F,EAAM8F,mBACXC,EAAgBC,SAASJ,EAAQK,OAChB,cAAjBL,EAAQK,MAAyBC,WAAWL,EAASvD,MAAQtC,EAAMmG,aAAa7D,MAC9EqD,EAAES,iBACFnG,EAAOM,GAAG,UAQd,QAAS8F,KAEP,MAAIC,WAAUC,gBACZD,WAAUC,YAAYC,mBAAmB,SAAShE,GAChDiE,EAAKjE,SAAWA,EAChBiE,EAAKC,MAAQD,EAAKjE,SAASmE,OAAOC,SAASC,QAAQ,GACnDJ,EAAKK,MAAQL,EAAKjE,SAASmE,OAAOI,UAAUF,QAAQ,GACpDG,EAAE,YAAYC,OAAd,kBAAuCR,EAAKC,MAA5C,iBAAkED,EAAKK,MAAvE,UACAI,KAAKT,IAEA,4BAtCX,GAAMA,GAAOjG,IAEbiG,GAAKU,WAAanH,EAAM8F,gBACxBW,EAAKW,YAAcpH,EAAMmG,YASzB,IAAMJ,IAAmB,YAWzBP,GAAW6B,IAAI,oBAAqB3B,GAEpCe,EAAKhB,OAASA,EAEdgB,EAAKJ,YAAcA,EC7BrB,QAASiB,OAAMC,EAAW5H,GACxB,MAAO,IAAI4H,GAAa5H,EAAjB,eAAyC2C,GAAI,QAClDmB,QAAU+D,OAAQ,SCFtB,QAASC,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,cACLC,IAAK,SACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,aACLC,IAAK,aACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,aACLC,IAAK,kBACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,eACLC,IAAK,UACLC,YAAa,8BACbC,WAAY,yCAEbH,MAAM,aACLC,IAAK,cACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,cACLC,IAAK,cACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,cACLC,IAAK,mBACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,cACLC,IAAK,cACLC,YAAa,+BAEdF,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAGhBJ,EAAmBK,UAAU,WChD/B,QAASC,uBAAsBX,GAC7B,GAAMY,GAAc1H,IACpB8G,GAAMa,MAAM,SAACC,GACXF,EAAYG,IAAMD,EAElBF,EAAY7G,UAAY+G,EAAOvE,IAAI,SAACY,GAClC,MAAOA,GAAMpD,UAAU,OAM7B,QAASiH,qBAAoBhB,GAQ3B,QAASiB,KACPjB,EAAM1E,KAAK4F,EAAU/D,MAAO,SAACA,GAC3B1C,QAAQC,IAAIyC,GACZ+D,EAAU/G,QAAUgD,EAAMnC,GAC1BkG,EAAUC,SAAU,IAXxB,GAAMD,GAAYhI,IAGlBgI,GAAU/D,SACV+D,EAAUC,SAAQ,EAYlBD,EAAUE,YAAcH,EAK1B,QAASI,sBAAqBrB,EAAOrH,EAAQD,GA2B3C,QAAS4I,KACP7G,QAAQC,IAAI,eACZ6G,EAAWpE,MAAMqE,QAAQ,WACvB7I,EAAOM,GAAG,iBA7Bd,GAAMsI,GAAarI,IAEnBqI,GAAWE,iBAAkB,EAE7BF,EAAW1H,OAAS,KACpBmG,EAAM0B,IAAI/I,EAAOoC,OAAQ,SAACoC,GAIxB,GAHAoE,EAAWpE,MAAQA,EACnBoE,EAAW1H,QAAWe,IAAK2G,EAAWpE,MAAMpD,UAAU,GAAGa,IAAKE,IAAKyG,EAAWpE,MAAMpD,UAAU,GAAGe,KAE7FpC,EAAM8F,kBAAmB,CAC3B,GAAMmD,GAAgBjJ,EAAMmG,aAAa7D,EACzCuG,GAAWK,cAAgBD,IAAkBxE,EAAMpE,KAAKiC,MAqB5DuG,EAAWM,OAASP,EAItB,QAASQ,sBAAqB9B,EAAOrH,GAInC,QAASwD,KACP4F,EAAW5E,MAAM6E,QAAQ,WACvBrJ,EAAOsJ,WALX,GAAMF,GAAa7I,IACnB6I,GAAW5E,MAAQ6C,EAAM0B,IAAI/I,EAAOoC,QAOpCgH,EAAW5F,OAASA,EClFtB,QAAS+F,sBAAqBC,GAC5B,GAAMC,GAAalJ,IAEnBkJ,GAAWrB,IAAMoB,EAAKtB,QAIxB,QAASwB,qBAAoBF,EAAMxJ,EAAQD,GAYzC,QAAS4J,KAGHC,EAAUxJ,KAAKiC,KAAO2G,IACxBY,EAAUC,UAAW,GAMzB,QAASC,KACPF,EAAUxJ,KAAKyI,QAAQ,WACrB7I,EAAOM,GAAG,gBAvBd,GAAMsJ,GAAYrJ,KACZyI,EAAgBjJ,EAAMmG,aAAa7D,EACzCuH,GAAUC,UAAW,EAGrBL,EAAKT,IAAI/I,EAAOoC,QAAQ2H,SAAS1J,KAAK,SAAC2J,GACrCJ,EAAUxJ,KAAO4J,EACjBL,MAYFC,EAAUD,gBAAkBA,EAO5BC,EAAUV,OAASY,EAIrB,QAASG,qBAAoBT,EAAMxJ,GAKjC,QAASwD,KACP0G,EAAU9J,KAAKiJ,QAAQ,WACrBrJ,EAAOM,GAAG,YAAaN,EAAOoC,UANlC,GAAM8H,GAAY3J,IAElB2J,GAAU9J,KAAOoJ,EAAKT,IAAI/I,EAAOoC,QAQjC7B,KAAKiD,OAASA,ECnDhB,QAASgG,MAAKlC,EAAW5H,GACvB,MAAO,IAAI4H,GAAa5H,EAAjB,cAAwC2C,GAAI,QACjDmB,QAAU+D,OAAQ,SCFtB,QAAS1G,UAASyG,EAAW5H,GAC3B,MAAO,IAAI4H,GAAa5H,EAAjB,kBAA4C2C,GAAI,QACrDmB,QAAU+D,OAAQ,STNtB4C,QAAQC,OAAO,gBAAiB,aAAc,YAAa,eACxDC,SAAS,UAAwC,cAA7BhG,OAAOC,SAASgG,SAA2B,4BAA8B,iCAC7FC,OAAO/K,MAEVA,KAAKgL,SAAW,gBAAiB,WCJjCL,QAAQC,OAAO,gBACZtC,WAAW,qBAAsBhI,oBACjCgI,WAAW,kBAAmBtH,iBAEjCV,mBAAmB0K,SAAW,QAAS,UAgBvChK,gBAAgBgK,SAAW,QAAS,UCpBpCL,QAAQC,OAAO,gBACZK,UAAU,YAAa9J,WAE1BA,UAAU6J,SAAW,UAAW,SAAU,YCF1CL,QAAQC,OAAO,gBACZtC,WAAW,iBAAkBxC,gBAEhCA,eAAekF,SAAW,QAAS,SAAU,cCJ7CL,QAAQC,OAAO,gBACZM,QAAQ,QAASrD,OAEpBA,MAAMmD,SAAW,YAAa,WCH9BL,QAAQC,OAAO,gBACZG,OAAO/C,QAEVA,OAAOgD,SAAW,iBAAkB,sBCHpCL,QAAQC,OAAO,gBACZtC,WAAW,wBAAyBE,uBACpCF,WAAW,sBAAuBO,qBAClCP,WAAW,uBAAwBY,sBACnCZ,WAAW,uBAAwBqB,sBAGtCnB,sBAAsBwC,SAAW,SAYjCnC,oBAAoBmC,SAAW,SAsB/B9B,qBAAqB8B,SAAW,QAAS,SAAU,SAqCnDrB,qBAAqBqB,SAAW,QAAS,UC9EzCL,QAAQC,OAAO,gBACZtC,WAAW,uBAAwByB,sBACnCzB,WAAW,sBAAuB4B,qBAClC5B,WAAW,sBAAuBmC,qBAErCV,qBAAqBiB,SAAW,QAOhCd,oBAAoBc,SAAW,OAAQ,SAAU,SA+BjDP,oBAAoBO,SAAW,OAAQ,UC3CvCL,QAAQC,OAAO,gBACZM,QAAQ,OAAQlB,MAEnBA,KAAKgB,SAAW,YAAa,WCH7BL,QAAQC,OAAO,gBACZM,QAAQ,WAAY7J,UAEvBA,SAAS2J,SAAW,YAAa","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : '//findawalk.herokuapp.com/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        // how to store current user?\n        $state.go('routesIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window', '$state', 'Waypoint'];\n//SET MAP\nfunction googleMap($window, $state, Waypoint) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '=',\n      zoom: '=',\n      waypoints: '=',\n      hasInfoWindows: '=',\n      isEditable: '=',\n      isTraceable: '=',\n      routeId: '='\n    },\n    link: function ($scope, element) {\n      console.log($scope);\n      const map = new $window.google.maps.Map(element[0] , {\n        center: $scope.center,\n        zoom: $scope.zoom,\n        mapTypeId: 'terrain'\n      });\n\n\n      // function isAuthorised() {\n      //   if(main.currentUser === Route.user.id) {\n      //\n      //   }\n      // }\n\n      // Addingwaypoints and updating their position so it orders the waypoints.\n      const createdWaypoints = [];\n      function addWaypoint(event) {\n        console.log('clicked');\n        const waypoint = {};\n        waypoint.lat = event.latLng.lat();\n        waypoint.lng = event.latLng.lng();\n        // If we are on exising route edit\n        if($state.params.id) {\n          waypoint.route_id = $state.params.id;\n          waypoint.position = $scope.waypoints.length + 1;\n        // If we are creating brand new route\n        } else {\n          waypoint.route_id = $scope.routeId;\n          createdWaypoints.push(waypoint);\n          waypoint.position = createdWaypoints.length;\n        }\n        Waypoint.save(waypoint, (waypoint) => {\n          if($state.params.id) {\n            $scope.waypoints.push(waypoint);\n          }\n          createMarker(waypoint);\n          drawPolyLines();\n        });\n      }\n\n      //ADD WAYPOINTS FOR EDIT (& CREATE)\n      map.addListener('dblclick', addWaypoint);\n\n      let markerRoutePathWaypoints = [];\n      const routePath = new $window.google.maps.Polyline({\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2,\n        map: map\n      });\n\n\n      //POLYLINES\n      function drawPolyLines() {\n        if($scope.isTraceable) {\n          markerRoutePathWaypoints = [];\n          const waypointsToPlot = $scope.waypoints ? $scope.waypoints : createdWaypoints;\n          waypointsToPlot.forEach((waypoint) => {\n            markerRoutePathWaypoints.push({ lat: waypoint.lat, lng: waypoint.lng });\n          });\n          routePath.setPath(markerRoutePathWaypoints);\n        }\n      }\n\n      drawPolyLines();\n      //CLEAR MARKERS\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers =[];\n      }\n\n      //EDIT LAT LNG FOR ROUTE EDIT\n      function handleEvent(event) {\n        this.waypoint.lat = event.latLng.lat();\n        this.waypoint.lng = event.latLng.lng();\n        Waypoint.update(this.waypoint, () => {\n          // $scope.$apply();\n          drawPolyLines();\n        });\n      }\n\n      function createMarker(waypoint) {\n        const marker = new $window.google.maps.Marker({\n          position: { lat: waypoint.lat, lng: waypoint.lng },\n          map: map,\n          animation: $window.google.maps.Animation.DROP,\n          draggable: $scope.isEditable,\n          waypoint: waypoint\n        });\n\n\n        //EVENT LISTENER FOR EDIT\n        marker.addListener('dragend', handleEvent);\n\n        // ROUTE INDEX INFO WINDOW\n        if($scope.hasInfoWindows) {\n          marker.addListener('mouseover', () => {\n            infoWindow.open(map, marker);\n            markers.push(marker);\n          });\n          marker.addListener('mouseout', () => {\n            infoWindow.close();\n          });\n          marker.addListener('click', () => {\n            window.location.href = `http://localhost:8000/#/routes/${waypoint.route.id}`;\n          });\n\n          // POPULATE INFO WINDOW\n          const contentString = '<h1>' + waypoint.route.title +'</h1>' + '<p>' + waypoint.route.route_description + '</p><h5>Click the marker for route details</h5><style> h1 { border: 1px solid #E37222; color: #E37222; text-align: center; border-radius: 5px;} p {color: #777879} h5 {color: #777879; text-decoration: underline;}</style>';\n          const infoWindow = new $window.google.maps.InfoWindow({\n            content: contentString\n          });\n        }\n\n        markers.push(marker);\n      }\n\n//SET MARKERS\n      $scope.$watch('waypoints', () => {\n        clearMarkers();\n        if($scope.waypoints) {\n          $scope.waypoints.forEach(createMarker);\n        }\n      });\n    }\n  };\n}\n","\nangular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n  main.getLocation = getLocation;\n  function getLocation() {\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position){\n        main.position = position;\n        main.myLat = main.position.coords.latitude.toFixed(4);\n        main.myLng = main.position.coords.longitude.toFixed(4);\n        $('#longLat').append(`<h2> Latitude: ${main.myLat}, Longitude:  ${main.myLng}</h2>`);\n      }.bind(main));\n    } else {\n      return 'Error in getting position';\n    }\n  }\n}\n","angular.module('finalProject')\n  .factory('Route', Route);\n\nRoute.$inject = ['$resource', 'API_URL'];\nfunction Route($resource, API_URL) {\n  return new $resource(`${API_URL}/routes/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('routesIndex', {\n      url: '/routes',\n      templateUrl: '/templates/routesIndex.html',\n      controller: 'RoutesIndexController as routesIndex'\n    })\n    .state('routesNew', {\n      url: '/routes/new',\n      templateUrl: '/templates/routesNew.html',\n      controller: 'RoutesNewController as routesNew'\n    })\n    .state('routesShow', {\n      url: '/routes/:id',\n      templateUrl: '/templates/routesShow.html',\n      controller: 'RoutesShowController as routesShow'\n    })\n    .state('routesEdit', {\n      url: '/routes/:id/edit',\n      templateUrl: '/templates/routesEdit.html',\n      controller: 'RoutesEditController as routesEdit'\n    })\n    .state('usefulInfo', {\n      url: '/usefulInfo',\n      templateUrl: '/templates/usefulInfo.html'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/routes');\n}\n","angular.module('finalProject')\n  .controller('RoutesIndexController', RoutesIndexController)\n  .controller('RoutesNewController', RoutesNewController)\n  .controller('RoutesShowController', RoutesShowController)\n  .controller('RoutesEditController', RoutesEditController);\n\n\nRoutesIndexController.$inject = ['Route'];\nfunction RoutesIndexController(Route) {\n  const routesIndex = this;\n  Route.query((routes) => {\n    routesIndex.all = routes;\n\n    routesIndex.waypoints = routes.map((route) => {\n      return route.waypoints[0];\n    });\n  });\n}\n\nRoutesNewController.$inject = ['Route'];\nfunction RoutesNewController(Route) {\n  const routesNew = this;\n  // const payload = $auth.getPayload();\n\n  routesNew.route = {};\n  routesNew.showmap=false;\n  // routesNew.route.projectCreator = [payload._id];\n\n  function create() {\n    Route.save(routesNew.route, (route) => {\n      console.log(route);\n      routesNew.routeId = route.id;\n      routesNew.showmap = true;\n      // $state.go('routesIndex');\n    });\n  }\n\n  routesNew.createRoute = create;\n}\n\n\nRoutesShowController.$inject = ['Route', '$state', '$auth'];\nfunction RoutesShowController(Route, $state, $auth) {\n  const routesShow = this;\n\n  routesShow.switchEditState = false;\n\n  routesShow.center = null;\n  Route.get($state.params, (route) => {\n    routesShow.route = route;\n    routesShow.center = { lat: routesShow.route.waypoints[0].lat, lng: routesShow.route.waypoints[0].lng };\n\n    if ($auth.isAuthenticated()) {\n      const currentUserId = $auth.getPayload().id;\n      routesShow.isCurrentUser = currentUserId === route.user.id;\n    }\n\n  });\n\n  // let switchEditState = false;\n  //\n  // function toggleEdit() {\n  //   console.log('In toggle edit!!');\n  //   console.log(switchEditState);\n  //   switchEditState = true;\n  // }\n  //\n  // routesShow.toggleEdit = toggleEdit;\n\n  function deleteRoute() {\n    console.log('in function');\n    routesShow.route.$remove(() => {\n      $state.go('routesIndex');\n    });\n  }\n  routesShow.delete = deleteRoute;\n}\n\nRoutesEditController.$inject = ['Route', '$state'];\nfunction RoutesEditController(Route, $state) {\n  const routesEdit = this;\n  routesEdit.route = Route.get($state.params);\n\n  function update() {\n    routesEdit.route.$update(() => {\n      $state.reload();\n    });\n  }\n  routesEdit.update = update;\n\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  const currentUserId = $auth.getPayload().id;\n  usersShow.editable = false;\n\n// wait until data has been returned from db to run function allowUserToEdit.\n  User.get($state.params).$promise.then((data) => {\n    usersShow.user = data;\n    allowUserToEdit();\n  });\n\n//prevent logged in user editing other users\n  function allowUserToEdit() {\n    // console.log('user to edit:', usersShow.user.id);\n    // console.log('currentUser:', currentUserId);\n    if (usersShow.user.id === currentUserId) {\n      usersShow.editable = true;\n    }\n  }\n\n  usersShow.allowUserToEdit = allowUserToEdit;\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('Waypoint', Waypoint);\n\nWaypoint.$inject = ['$resource', 'API_URL'];\nfunction Waypoint($resource, API_URL) {\n  return new $resource(`${API_URL}/waypoints/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}